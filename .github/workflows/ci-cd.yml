name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.get_version.outputs.version }}

    steps:
      # Checkout the code from the repository
      - name: Checkout code
        uses: actions/checkout@v2

      # Set up Node.js environment with version 16
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "16"

      # Install the required dependencies
      - name: Install dependencies
        run: npm install

      # Build the app for production
      - name: Build the app
        run: npm run build

      # Get version from package.json
      - name: Get version from package.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION"
        outputs:
          version: ${{ steps.get_version.outputs.version }}

      # Log in to Docker registry
      - name: Log in to Docker registry
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build the Docker image using the current context
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/lebasee:${{ steps.get_version.outputs.version }} -t ${{ secrets.DOCKER_USERNAME }}/lebasee:latest .

      # Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/lebasee:${{ steps.get_version.outputs.version }}
          docker push ${{ secrets.DOCKER_USERNAME }}/lebasee:latest

      # Log out from Docker registry to clean up
      - name: Log out from Docker registry
        run: docker logout

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      # Deploy to Liara
      - name: Deploy to Liara
        env:
          LIARA_TOKEN: ${{ secrets.LIARA_API_TOKEN }}
        run: |
          npm i -g @liara/cli@7
          liara deploy --app="lebasee-app" \
                       --image="${{ secrets.DOCKER_USERNAME }}/lebasee:${{ needs.build.outputs.version }}" \
                       --api-token="$LIARA_TOKEN" \
                       --platform=docker \
                       --port=80 \
                       --no-app-logs
